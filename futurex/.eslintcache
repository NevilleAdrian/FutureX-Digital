[{"/Users/USER/FutureX-Digital/futurex/src/reportWebVitals.js":"1","/Users/USER/FutureX-Digital/futurex/src/App.js":"2","/Users/USER/FutureX-Digital/futurex/src/index.js":"3","/Users/USER/FutureX-Digital/futurex/src/store/reducers/currency.js":"4","/Users/USER/FutureX-Digital/futurex/src/store/actions/currency.js":"5","/Users/USER/FutureX-Digital/futurex/src/views/home/index.js":"6","/Users/USER/FutureX-Digital/futurex/src/utils.js":"7","/Users/USER/FutureX-Digital/futurex/src/components/navbar/index.js":"8","/Users/USER/FutureX-Digital/futurex/src/components/body/index.js":"9","/Users/USER/FutureX-Digital/futurex/src/components/paypal/index.js":"10","/Users/USER/FutureX-Digital/futurex/src/store/reducers/index.js":"11","/Users/USER/FutureX-Digital/futurex/src/components/mockdata/index.js":"12"},{"size":362,"mtime":1606147169564,"results":"13","hashOfConfig":"14"},{"size":153,"mtime":1606166421672,"results":"15","hashOfConfig":"14"},{"size":744,"mtime":1606166422504,"results":"16","hashOfConfig":"14"},{"size":225,"mtime":1606166443884,"results":"17","hashOfConfig":"14"},{"size":103,"mtime":1606166443881,"results":"18","hashOfConfig":"14"},{"size":173,"mtime":1606166478074,"results":"19","hashOfConfig":"14"},{"size":131,"mtime":1606166687448,"results":"20","hashOfConfig":"14"},{"size":8592,"mtime":1606230331126,"results":"21","hashOfConfig":"14"},{"size":4988,"mtime":1606229344973,"results":"22","hashOfConfig":"14"},{"size":1242,"mtime":1606230437079,"results":"23","hashOfConfig":"14"},{"size":182,"mtime":1606220429426,"results":"24","hashOfConfig":"14"},{"size":1523,"mtime":1606166470575,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18h8nix",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/USER/FutureX-Digital/futurex/src/reportWebVitals.js",[],"/Users/USER/FutureX-Digital/futurex/src/App.js",["53"],"import logo from './logo.svg';\nimport './App.css';\nimport Home from './views/home';\n\n\nfunction App() {\n  return (\n   <Home/>\n  );\n}\n\nexport default App;\n",["54","55"],"/Users/USER/FutureX-Digital/futurex/src/index.js",[],"/Users/USER/FutureX-Digital/futurex/src/store/reducers/currency.js",[],"/Users/USER/FutureX-Digital/futurex/src/store/actions/currency.js",[],"/Users/USER/FutureX-Digital/futurex/src/views/home/index.js",[],"/Users/USER/FutureX-Digital/futurex/src/utils.js",[],"/Users/USER/FutureX-Digital/futurex/src/components/navbar/index.js",["56","57","58"],"import { useEffect, useState } from 'react';\nimport \"./index.css\"\nimport Logo from \"../../assets/images/logofx.png\"\nimport Cart from \"../../assets/images/cart.png\"\nimport Arrow from \"../../assets/images/left-arrow.png\"\nimport X from \"../../assets/images/x.png\"\nimport { Currency } from '../mockdata'\nimport { myCurrency } from '../../store/actions/currency'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { formattedCurrency } from '../../utils'\nimport PayPalBtn from \"../paypal\"\n\n\n\n\nexport default function NavBar({ increment, decrement, displayNav, showNav, remove, removeAll, items }) {\n\n   //Get Currency from the redux store\n    const curr = useSelector(state => state.currency);\n\n    //Initialized didpatch functionality\n    const dispatch = useDispatch();\n\n    //Calculate total price\n    const calculateItems = items.reduce((accumulator, current) => accumulator += current.count * current.price, 0)\n    \n    //Showpaypal popup\n    const [showPaypal, setShowPayPal] = useState(false)\n\n    const handleShowPayPal = () => {\n        setShowPayPal(!showPaypal)\n    }\n    \n   const [success, setSuccess] = useState('')\n   \n    //Printout payment details\n    const paymentHandler = (details, data) => {\n        console.log('data', data);\n        setSuccess(details.status)\n      }\n  \n\n    return (\n        <>\n            {showPaypal ? \n            <PayPalBtn\n                    close ={handleShowPayPal}\n                    amount = {calculateItems}\n                    currency = {'USD'}\n                    onSuccess = {paymentHandler}\n                    success = {success}\n                    /> :\n                <>\n                    <div className=\"nav-bottom\">\n                        <nav className=\"navbar navbar-expand-lg navbar-light nav-container \">\n\n                            <img alt=\"logo\" className=\"img-fluid logo\" src={Logo} />\n                            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                                <span className=\"navbar-toggler-icon\"></span>\n                            </button>\n\n                            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                                <ul className=\"navbar-nav mr-auto\">\n                                </ul>\n                                <a className=\"nav-link pl-0\">Account</a>\n\n                                <a onClick={() => displayNav(true)} className=\"cart\">\n                                    <img alt=\"cart\" className=\"cart-img\" src={Cart} />\n                                    <p className=\"cart-p\">{items.length}</p>\n                                </a>\n                            </div>\n\n\n\n                        </nav>\n\n                    </div>\n                    {showNav &&\n                        <span>\n                            <div className=\"transparent\"></div>\n\n                            <div className={showNav ? \"overlay-fixed\" : \"overlay\"}>\n                                <div className=\"pt-3 pl-4 mb-5 pr-5\">\n                                    <div className=\"row\">\n                                        <div className=\"col-md-6\">\n                                            <button onClick={() => displayNav(false)} type=\"button\" className=\"trans pl-0\">\n                                                <div className=\"button-arrow\">\n                                                    <img alt=\"arrow\" className=\"arrow\" src={Arrow} />\n                                                </div>\n                                            </button>\n                                        </div>\n                                        <div className=\"col-md-6 d-flex align-items-center\">\n                                            <p className=\"cart-text pb-0 mb-0\">YOUR CART</p>\n\n                                        </div>\n\n                                    </div>\n                                    <div className=\"pt-3\">\n                                        <select value={curr} onChange={({ target: { value } }) => dispatch(myCurrency(value))} className=\"input-dropdown\">\n                                            {Currency.map((cur) => (\n                                                <option key={cur} value={cur}>{cur}</option>\n                                            ))}\n\n                                        </select>\n                                    </div>\n                                    <div className=\"pt-3\">\n                                        {items.map((item) => (\n                                            <div key={item.id} className=\"white-bg mb-4 container-fluid\">\n                                                <div className=\"pt-3 row\">\n                                                    <div className=\"col-md-6\">\n                                                        <p>{item.title}</p>\n                                                    </div>\n                                                    <div className=\"col-md-6\">\n                                                        <img onClick={() => remove(item.id)} alt=\"cancel\" className=\"img-fluid x-button  float-md-right\" src={X} />\n                                                    </div>\n\n                                                </div>\n                                                <div className=\"pb-1 row\">\n                                                    <div className=\"col-md-4 pt-5 \">\n                                                        <form >\n                                                            <input onClick={() => decrement(item.id)} type='button' value='-' className='qtyminus' field='quantity' />\n                                                            <input type='text' name='quantity' value={item.count} className='qty' />\n                                                            <input onClick={() => increment(item.id)} type='button' value='+' className='qtyplus' field='quantity' />\n                                                        </form>\n                                                    </div>\n                                                    <div className=\"col-md-5 pt-5 \">\n                                                        <p className=\"price\">{formattedCurrency(item.price * item.count, curr)}</p>\n                                                    </div>\n                                                    <div className=\"col-md-3\">\n                                                        <img alt=\"cancel\" className=\"img-fluid url-image float-md-left\" src={item.image} />\n                                                    </div>\n\n                                                </div>\n                                            </div>\n                                        ))}\n\n                                    </div>\n                                    <div className=\"pt-5\">\n                                        <div className=\"top-border pt-2\">\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n                                                    <p className=\"float-md-left\">Subtotal</p>\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <p className=\"float-md-right\">{formattedCurrency(calculateItems, curr)}</p>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"pt-2\">\n                                        <button onClick={() => removeAll()} className=\"button-outline\">\n                                            CLEAR ITEMS\n                           </button>\n                                    </div>\n                                    <div className=\"pt-4\">\n                                        <button onClick={handleShowPayPal} className=\"button-solid\">\n                                            PROCEED TO CHECKOUT\n                          </button>\n                                    </div>\n                                </div>\n\n                            </div>\n\n                        </span>\n\n                    }\n\n                </>\n            }\n\n\n        </>\n    )\n}\n","/Users/USER/FutureX-Digital/futurex/src/components/body/index.js",[],"/Users/USER/FutureX-Digital/futurex/src/components/paypal/index.js",["59"],"/Users/USER/FutureX-Digital/futurex/src/store/reducers/index.js",[],"/Users/USER/FutureX-Digital/futurex/src/components/mockdata/index.js",[],{"ruleId":"60","severity":1,"message":"61","line":1,"column":8,"nodeType":"62","messageId":"63","endLine":1,"endColumn":12},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"60","severity":1,"message":"68","line":1,"column":10,"nodeType":"62","messageId":"63","endLine":1,"endColumn":19},{"ruleId":"69","severity":1,"message":"70","line":65,"column":33,"nodeType":"71","endLine":65,"endColumn":62},{"ruleId":"69","severity":1,"message":"70","line":67,"column":33,"nodeType":"71","endLine":67,"endColumn":86},{"ruleId":"72","severity":1,"message":"73","line":13,"column":21,"nodeType":"71","endLine":13,"endColumn":90},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["74"],"no-negated-in-lhs",["75"],"'useEffect' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]